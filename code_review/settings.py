"""
Django settings for code_review project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
from celery.schedules import crontab
from dotenv import load_dotenv

# 使用pymysql替代MySQLdb
import pymysql
pymysql.install_as_MySQLdb()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Python 路径配置（已移除 simpleui）

# Load environment variables from .env file
load_dotenv(BASE_DIR / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2k=x9_t=1)sw*@#oabqe0*r34t*%goq95o^)$0*l_90rv4cb4*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 代理和转发配置
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # 支持反向代理的 HTTPS

# HTTPS 安全配置（生产环境建议启用）
# SECURE_SSL_REDIRECT = True  # 强制 HTTPS 重定向（生产环境启用）
SECURE_HSTS_SECONDS = 0  # HTTP 严格传输安全（生产环境设置为 31536000）
SECURE_HSTS_INCLUDE_SUBDOMAINS = False  # 生产环境设置为 True
SECURE_HSTS_PRELOAD = False  # 生产环境设置为 True

# ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,47.118.16.139,47.118.16.139:6000,47.118.16.139:6001').split(',')
ALLOWED_HOSTS = ["*"]

# CSRF 和 Cookie 配置
CSRF_TRUSTED_ORIGINS = [
    # HTTP 地址（开发环境）
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://47.118.16.173:8000',
    'http://www.wsztest.online',
    
    # HTTPS 地址（生产环境）
    'https://localhost:8000',
    'https://127.0.0.1:8000',
    'https://47.118.16.173',
    'https://47.118.16.173:8000',
    'https://www.wsztest.online',
]

# CSRF 配置 - 宽松兼容模式（兼容更多浏览器）
# 说明：Lax 模式在大多数情况下都能工作，且兼容性最好
CSRF_COOKIE_SECURE = False  # 改为 False，同时支持 HTTP 和 HTTPS
CSRF_COOKIE_HTTPONLY = False  # 允许 JavaScript 读取 CSRF token
CSRF_COOKIE_SAMESITE = 'Lax'  # Lax 模式兼容性最好，大部分场景够用
CSRF_USE_SESSIONS = False
CSRF_COOKIE_NAME = 'csrftoken'
CSRF_COOKIE_DOMAIN = None  # 自动使用当前域名

# Session 配置
SESSION_COOKIE_SECURE = False  # 改为 False，兼容 HTTP
SESSION_COOKIE_SAMESITE = 'Lax'  # Lax 模式，兼容性好
SESSION_COOKIE_HTTPONLY = True

CORS_ALLOW_ALL_ORIGINS = True  # 开发环境使用，生产环境建议改为 False

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = list(__import__('corsheaders.defaults').defaults.default_headers) + [
    'x-csrftoken',  # Django CSRF token（重要！）
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',  # CORS 跨域支持
    'django_celery_beat',  # Celery定时任务管理
    'app_ai',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware', 
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'code_review.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'code_review.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.mysql'),
        'NAME': os.getenv('DB_NAME', 'code_review'),
        'USER': os.getenv('DB_USER', 'root'),
        'PASSWORD': os.getenv('DB_PASSWORD', '123456'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '3306'),
        'OPTIONS': {
            'charset': 'utf8mb4',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ===== Celery 配置 =====
# Celery Broker设置
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')

# Celery Result Backend设置
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')

# Celery任务序列化
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']

# Celery时区设置
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# Celery任务路由 - 已移除旧的tasks目录配置
CELERY_TASK_ROUTES = {
    # 所有任务使用默认队列
}

# Celery任务结果过期时间（秒）
CELERY_RESULT_EXPIRES = 3600  # 1小时

# Celery Worker配置
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# 使用线程池而不是进程池，避免HTTP连接问题
CELERY_WORKER_POOL = 'threads'
CELERY_WORKER_CONCURRENCY = 2

# Celery Beat调度器配置（用于定时任务）
# 使用数据库调度器，可以在Django Admin中管理定时任务
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# 定时任务配置 - 通过Django Admin管理
# CELERY_BEAT_SCHEDULE = {} # 留空，使用数据库调度器在Admin中配置

# 手动指定要导入的任务模块
CELERY_IMPORTS = [
    'app_ai.tasks.async_get',
    'app_ai.tasks.async_push',
]

# Celery任务失败重试配置
CELERY_TASK_ACKS_LATE = True
CELERY_TASK_REJECT_ON_WORKER_LOST = True

# Celery日志配置
CELERY_WORKER_HIJACK_ROOT_LOGGER = False
CELERY_WORKER_LOG_FORMAT = '[%(asctime)s: %(levelname)s/%(processName)s] %(message)s'
CELERY_WORKER_TASK_LOG_FORMAT = '[%(asctime)s: %(levelname)s/%(processName)s][%(task_name)s(%(task_id)s)] %(message)s'

# ===== 日志配置 =====
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'app_ai': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
